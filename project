#!/bin/bash

# "Universal" Project Setup Tool (heavily WIP)

lang="help"

show_help() {
  echo "Usage: project [ flag ] [ args ]"
  echo " "
  echo "Commands:"
  echo "    setup      Initialize project folder."
  echo "    build      Builds a bianry from source."
  echo "    run        Runs the created binary."
  echo "    module     Creates a basic module structure (NIX ONLY)"
  echo "    drv        Creates a basic derivation structure (NIX ONLY)."
  echo "    default    Creates a default.nix file (NIX ONLY)."
  echo " "
  echo "Flags:"
  echo "    -h         Display this message."
  echo "    -c         Set language to C."
  echo "    -r         Set language to Rust."
  echo "    -n         Set language to Nix."
  echo "    -l         Set language to Lua."
  echo "    -cpp       Set language to C++."
}

mode() {
  mode="$OPTARG"
  case $mode in
    setup|build|run)
      ;;
    module|drv|default)
      echo "Error: The '$mode' command is exclusive to the Nix language."  
      show_help
      exit 1
      ;;
    *)
      echo "Error: Unknown command '$OPTARG'." >&2
      show_help
      exit 1
      ;;
  esac
}
# Flags
while getopts "hc:r:n:l:cpp:" opt; do
  case ${opt} in
    h)
      show_help
      ;;
    c)
      lang="clang"
      mode
      ;;
    r)
      lang="rust"
      ;;
    n)
      lang="nix"
      mode="$OPTARG"
      case $mode in
        module)
	  # Funky but allows setting module names.
          # Check if the next argument is available and not starting with a "-"
          if [[ -n "${!OPTIND}" ]] && [[ "${!OPTIND}" != -* ]]; then
            module_name="${!OPTIND}"  # Assign the next argument
            ((OPTIND++))             # Manually increment OPTIND to consume the argument
	    echo "Module name: $module_name.nix"
          else
            echo "Error: The module requires a name." >&2
            show_help
            exit 1
          fi
          ;;
        drv|default)
	  ;;
        setup|build|run)
	  echo "Error: The '$mode' command cannot be used in the Nix language."
	  show_help
	  exit 1
          ;;
	*)
	  echo "Error: Unknown command '$OPTARG'." >&2
	  show_help
	  exit 1
	  ;;
      esac
      ;;
    l)
      lang="lua"
      mode
      ;;
    cpp)
      lang="cpp"
      ;;
    \?)
      show_help
      ;;
  esac
  echo "Language: ${lang}"
done
shift $((OPTIND -1))


setup() {
  case $lang in
    clang)
      CSD='${CMAKE_SOURCE_DIR}/bin'
      project_name="main"
      if [ -n "$2" ]; then 
        project_name="$2"
      fi
      mkdir -p ./build ./src ./bin
      touch ./src/main.c
      echo -e "cmake_minimum_required(VERSION 3.20)\nproject ("$project_name" C)\nadd_executable("$project_name" src/main.c)\nset(EXECUTABLE_OUTPUT_PATH ${CSD})" > CMakeLists.txt
      cd ./build || exit
      cmake ../ 2>/dev/null
        if [ -n $? ]; then
          echo "Error: Program 'cmake' not found."
        fi
      ;;
    lua)
      echo "Bad language detected."
      exit 1
      ;;
    rust)
      echo "Bad language detected."
      exit 1
      ;;
    cpp)
      echo "Bad language detected."
      exit 1
      ;;
  esac
}

module() {
# Ugly but not sure how to generate the module with proper formatting otherwise.
case $USER in
skettisouls)
echo '{ config, lib, pkgs, ... }:

let
  inherit (lib)
    mkEnableOption
    mkIf
    mkOption
    types
    ;

  cfg = config.shit.name;
in
{
  options.shit.name = {
    enable = mkEnableOption "desc";
  };

  config = mkIf cfg.enable {
    prefix.name = {
      enable = true;
    };
  };
}' > $module_name.nix
;;
*)
echo '{ config, lib, pkgs, ... }:

let
  inherit (lib)
    mkEnableOption
    mkIf
    mkOption
    types
    ;

  # Replace "name", "prefix", and "desc". Also optionally replace "base".

  cfg = config.base.name;
in
{
  options.base.name = {
    enable = mkEnableOption "desc";
  };

  config = mkIf cfg.enable {
    prefix.name = {
      enable = true;
    };
  };
}' > $module_name.nix
;;
esac
}

case "$mode" in
  setup)
    echo "Mode: $mode"
    setup
    ;;
  module)
    module
    echo "Mode: $mode"
    ;;
esac
